/*
 point2d point2 d ctr = getcenter get center 
 
 chopped point
 cx = 1 
 cy = 1 
 len = max_value 
 
 try for points along edge
 validatepath validate path 
 pathiterator path iterator i = generalpath general path getpathiterator get path iterator new affinetransform affine transform 1 
 coords = new 6 
 type = i currentsegment current segment coords 
 prevx prev x = coords 0 
 prevy prev y = coords 1 
 i next 
 for ! i isdone is done i next {
 i currentsegment current segment coords 
 point2d point2 d chop = geom intersect 
 prevx prev x prevy prev y 
 coords 0 coords 1 
 p x p y 
 ctr x ctr y
 
 
 if chop != {
 cl = geom length2 chop x chop y p x p y 
 if cl < len {
 len = cl 
 cx = chop x 
 cy = chop y 
 }
 }
 
 prevx prev x = coords 0 
 prevy prev y = coords 1 
 }
 
 
 if isclosed is closed size > 1 {
 node first = get 0 
 node last = get size 1 
 point2d point2 d chop = geom intersect 
 first x 0 first y 0 
 last x 0 last y 0 
 p x p y 
 ctr x ctr y
 
 if chop != {
 cl = geom length2 chop x chop y p x p y 
 if cl < len {
 len = cl 
 cx = chop x 
 cy = chop y 
 }
 }
 }
 
 
 if none found pick closest vertex
 if len == max_value {
 for j = 0 n = size j < n j++ {
 node cp = get j 
 l = geom length2 cp x 0 cp y 0 p x p y 
 if l < len {
 len = l 
 cx = cp x 0 
 cy = cp y 0 
 }
 }
 }
 new point2d point2 d cx cy 
 */ determine the length of the path compute the relative point on the path if new point2d point2 d coords 0 coords 1 compute the relative point2d point2 d on the line /*
 new point2d point2 d 
 prevx prev x * pos / len + coords 0 * pos + seglen seg len / len 
 prevy prev y * pos / len + coords 1 * pos + seglen seg len / len
 */ xxx x x x this works only for straight lines! quadto quadto cubicto lineto 