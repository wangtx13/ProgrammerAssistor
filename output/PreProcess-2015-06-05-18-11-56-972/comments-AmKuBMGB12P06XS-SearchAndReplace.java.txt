{{{ imports }}} {{{ getters and setters {{{ setsearchstring set search }}} {{{ getsearchstring get search }}} {{{ setreplacestring set replace }}} {{{ getreplacestring get replace }}} {{{ setwholeword set whole word }}} {{{ setignorecase set ignore case }}} {{{ getwholeword get whole word }}} {{{ getignorecase get ignore case }}} {{{ setregexp set regexp }}} {{{ getregexp get regexp }}} {{{ setreversesearch set reverse search }}} {{{ getreversesearch get reverse search }}} {{{ setbeanshellreplace set bean shell replace }}} {{{ getbeanshellreplace get bean shell replace }}} {{{ setautowrap set auto wrap }}} {{{ getautowrap get auto wrap }}} {{{ setsearchmatcher set search matcher }}} {{{ getsearchmatcher get search matcher }}} {{{ setsearchfileset set search set }}} {{{ getsearchfileset get search set }}} {{{ getsmartcasereplace get smart case replace }}} }}} {{{ actions {{{ hypersearch hyper search }}} {{{ hypersearch hyper search component that will parent any dialog boxes }}} {{{ find component that will parent any dialog boxes /* this is stupid and misleading 
					 * but 'path' is not used anywhere except
					 * the above line and if this is done
					 * after the 'continue' then we will
					 * either hang or be forced to duplicate
					 * it inside the buffer == or add
					 * a 'finally' clause you decide which one's
					 * worse */ wait for the buffer to load if auto wrap is on always restart search if auto wrap is off and we're called from a macro stop search if we're called interactively ask the user what to do beep if beep property set start search from beginning }}} {{{ find }}} {{{ find make sure end of match is visible make sure start of match is visible }}} {{{ replace component that will parent any dialog boxes a little hack for reverse replace and find so that replace and find continues from the right location }}} {{{ replace component that will parent any dialog boxes }}} {{{ replaceall replace all }}} {{{ replaceall replace all component that will parent any dialog boxes /* this is stupid and misleading 
				 * but 'path' is not used anywhere except
				 * the above line and if this is done
				 * after the 'continue' then we will
				 * either hang or be forced to duplicate
				 * it inside the buffer == or add
				 * a 'finally' clause you decide which one's
				 * worse */ wait for buffer to finish loading leave buffer in a consistent state if an occurs /* don't do this when playing a macro cos it's annoying */ }}} }}} {{{ escaperegexp escape regexp }}} {{{ load tags plugin likes to call this at times other than startup so we need to fire a searchsettingschanged search settings changed to notify the search bar and so on }}} {{{ save }}} {{{ handleerror handle }}} {{{ members {{{ instance variables }}} {{{ initreplace init replace }}} {{{ record only record this if doing a find next }}} {{{ replaceinselection replace in selection /* if an occurence occurs at the
		beginning of the selection the
		selection start will get moved 
		this sucks so we hack to avoid it */ }}} {{{ _replace }}} {{{ replaceone replace one }}} {{{ replaceone replace one }}} {{{ regexpbeanshellreplace regexp bean shell replace not really necessary because it is already cleared in the end of beanshell bean shell runcachedblock run cached block }}} {{{ regexpreplace regexp replace last character of the replace it is not a capturing group it was $$ so it is an escaped $ $0 meaning the first capturing group the found value the character is not a digit going back and end loop }}} {{{ literalbeanshellreplace literal bean shell replace not really necessary because it is already cleared in the end of beanshell bean shell runcachedblock run cached block }}} {{{ getcolumnonotherline get column on other line }}} }}} 