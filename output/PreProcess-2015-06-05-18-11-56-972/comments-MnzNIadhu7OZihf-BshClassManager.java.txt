/*
 notes 

 note we may need some synchronization in here

 note on dependency this base is jdk j d k 1 1 compatible 
 however we are forced to use weak references in the full featured
 the optional bsh classpath to accomodate all of
 the fleeting namespace listeners as they fall out of scope namespaces
  name spaces
 must be informed if the space changes so that they can un cache
 names 
 <p>

 perhaps a simpler idea would be to have entities that reference cached
 types always perform a light weight check with a counter / reference
 value and use that to detect changes in the namespace this puts the
 burden on the consumer to check at appropriate times but could eliminate
 the need for the listener in many places and the necessity of weak
 references in this 
 <p>
*/ do we have the necessary jdk1 2 and optional package? try to load the module don't refer to it directly here or we're dependent upon it /*ignore*/ try scripted move me to classpath/classmanagerimpl??? classpath/ manager impl??? ignore /*
 original note jdk under win is throwing these to
 warn about lower case / upper case possible mismatch 
 e g bsh console bsh console

  console

 update prior to 1 3 we were squeltching noclassdeffounderrors
  no def found errors
 which was very annoying i cannot reproduce the original problem
 and this was never a valid solution if there are legacy vms v ms that
 have problems we can include a more specific test for them here 
 */ classloader wants no leading slash classloader wants no leading slash try and then if allowed note that the compiler should not allow both /*
 note this is temporary we currently keep a flat
 namespace of the base name of classes i e beanshell bean shell cannot be in the
 process of defining two classes in different with the same
 base name to remove this limitation requires that we work through
 namespace imports in an analogous or using the same path as regular
 resolution this workaround should handle most cases
 so we'll try it for now 
 */ /*
 the real in the classpath classmanagerimpl manager impl handles
 reloading of the generated classes 
 */ /*
 old injected classes into the parent classloader 
 this was incorrect behavior for several reasons the biggest problem
 is that classes could therefore only be defined once across all
 executions of the script 

 classloader loader cl = this getclass get getclassloader get loader 
 clas 
 try {
 clas = reflect invokeobjectmethod 
 cl defineclass define 
 new {
 name 
 new primitive 0 /offset/ 
 new primitive length /len/
 } 
 interpreter callstack call stack simplenode simple node null
 
 } catch e {
 e printstacktrace print stack trace 
 throw new interpretererror interpreter unable to define + e 
 }
 absolutenonclasses absolute non classes remove name may have been axed previously
 clas 
 */ /*
 note is using signaturekey signature key in this way dangerous? in the pathological
 case a user could eat up memory caching every possible combination of
 argument types to an untyped maybe we could be smarter about
 it by ignoring the types of untyped parameter positions? the method
 resolver could a set of hints for the signature key caching?

 there is also the overhead of creating one of these for every method
 dispatched what is the alternative?
 */ no args 