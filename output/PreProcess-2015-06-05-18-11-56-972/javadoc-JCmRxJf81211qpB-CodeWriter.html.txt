codewriterextends writerextends objectimplements codevisitor visitor codewriter writer classwriter writer cw computemaxs compute maxs init access name desc exceptions visitinsn visit insn opcode visitintinsn visit insn opcode operand visitvarinsn visit var insn opcode var visittypeinsn visit type insn opcode desc visitfieldinsn visit field insn opcode owner name desc visitmethodinsn visit insn opcode owner name desc visitjumpinsn visit jump insn opcode label label visitlabel visit label label label visitldcinsn visit ldc insn cst visitiincinsn visit iinc insn var increment visittableswitchinsn visit table switch insn min max label dflt label labels visitlookupswitchinsn visit lookup switch insn label dflt keys label labels visitmultianewarrayinsn visit multi a new insn desc dims visittrycatchblock visit try catch block label start label end label handler type visitmaxs visit maxs maxstack max stack maxlocals max locals visitlocalvariable visit local variable name desc label start label end index visitlinenumber visit line number line label start resizeinstructions resize instructions indexes sizes len getcodesize get size byte getcode get all codevisitor visitor cw the writer in which the must be added computemaxs compute maxs if the maximum stack size and number of local variables must be automatically computed access the method's access flags see constants name the method's name desc the method's descriptor see type exceptions the internal names of the method's exceptions may be specified by visitinsn visit insn in codevisitor visitor opcode the opcode of the instruction to be visited this opcode is either nop n o p aconst_null iconst_m1 iconst_0 iconst_1 iconst_2 iconst_3 iconst_4 iconst_5 lconst_0 lconst_1 fconst_0 fconst_1 fconst_2 dconst_0 dconst_1 iaload i a l o a d laload l a l o a d faload f a l o a d daload d a l o a d aaload a a l o a d baload b a l o a d caload c a l o a d saload s a l o a d iastore i a s t o r e lastore l a s t o r e fastore f a s t o r e dastore d a s t o r e aastore a a s t o r e bastore b a s t o r e castore c a s t o r e sastore s a s t o r e pop p o p pop2 p o p2 dup d u p dup_x1 dup_x2 dup2 d u p2 dup2_x1 dup2_x2 swap s w a p iadd i a d d ladd l a d d fadd f a d d dadd d a d d isub i s u b lsub l s u b fsub f s u b dsub d s u b imul i m u l lmul l m u l fmul f m u l dmul d m u l idiv i v ldiv l d i v fdiv f d i v ddiv d d i v irem i r e m lrem l r e m frem f r e m drem d r e m ineg i n e g lneg l n e g fneg f n e g dneg d n e g ishl i s h l lshl l s h l ishr i s h r lshr l s h r iushr i u s h r lushr l u s h r iand i a n d land l a n d ior i o r lor l o r ixor i x o r lxor l x o r i2l i2 l i2f i2 f i2d i2 d l2i l2 i l2f l2 f l2d l2 d f2i f2 i f2l f2 l f2d f2 d d2i d2 i d2l d2 l d2f d2 f i2b i2 b i2c i2 c i2s i2 s lcmp l c m p fcmpl f c m p l fcmpg f c m p g dcmpl d c m p l dcmpg d c m p g ireturn i r e t u r n lreturn l r e t u r n freturn f r e t u r n dreturn d r e t u r n areturn a r e t u r n r e t u r n arraylength a r r a y l e n g t h athrow a t h r o w monitorenter m o n i t o r e n t e r or monitorexit m o n i t o r e x i t specified by visitintinsn visit insn in codevisitor visitor opcode the opcode of the instruction to be visited this opcode is either bipush b i p u s h sipush s i p u s h or newarray n e w a r r a y operand the operand of the instruction to be visited specified by visitvarinsn visit var insn in codevisitor visitor opcode the opcode of the local variable instruction to be visited this opcode is either iload i l o a d lload l l o a d fload f l o a d dload d l o a d aload a l o a d istore i s t o r e lstore l s t o r e fstore f s t o r e dstore d s t o r e astore a s t o r e or ret r e t var the operand of the instruction to be visited this operand is the index of a local variable specified by visittypeinsn visit type insn in codevisitor visitor opcode the opcode of the type instruction to be visited this opcode is either new n e w anewarray a n e w a r r a y checkcast c h e c k c a s t or instanceof i n s t a n c e o f desc the operand of the instruction to be visited this operand is must be a fully qualified name in internal form or the type descriptor of an type see type specified by visitfieldinsn visit field insn in codevisitor visitor opcode the opcode of the type instruction to be visited this opcode is either getstatic g e t s t a t i c putstatic p u t s t a t i c getfield g e t f i e l d or putfield p u t f i e l d owner the internal name of the field's owner see getinternalname get internal name name the field's name desc the field's descriptor see type specified by visitmethodinsn visit insn in codevisitor visitor opcode the opcode of the type instruction to be visited this opcode is either invokevirtual i n v o k e v i r t u a l invokespecial i n v o k e s p e c i a l invokestatic i n v o k e s t a t i c or invokeinterface i n v o k e i n t e r f a c e owner the internal name of the method's owner see getinternalname get internal name name the method's name desc the method's descriptor see type specified by visitjumpinsn visit jump insn in codevisitor visitor opcode the opcode of the type instruction to be visited this opcode is either ifeq i f e q ifne i f n e iflt i f l t ifge i f g e ifgt i f g t ifle i f l e if_icmpeq if_icmpne if_icmplt if_icmpge if_icmpgt if_icmple if_acmpeq if_acmpne goto g o t o jsr j s r ifnull i f n u l l or ifnonnull i f n o n n u l l label the operand of the instruction to be visited this operand is a label that designates the instruction to which the jump instruction may jump specified by visitlabel visit label in codevisitor visitor label a label specified by visitldcinsn visit ldc insn in codevisitor visitor cst the constant to be loaded on the stack this parameter must be a non a a a or a specified by visitiincinsn visit iinc insn in codevisitor visitor var index of the local variable to be incremented increment amount to increment the local variable by specified by visittableswitchinsn visit table switch insn in codevisitor visitor min the minimum key value max the maximum key value dflt beginning of the default handler block labels beginnings of the handler blocks labels i is the beginning of the handler block for the min + i key specified by visitlookupswitchinsn visit lookup switch insn in codevisitor visitor dflt beginning of the default handler block keys the values of the keys labels beginnings of the handler blocks labels i is the beginning of the handler block for the keys i key specified by visitmultianewarrayinsn visit multi a new insn in codevisitor visitor desc an type descriptor see type dims number of dimensions of the to allocate specified by visittrycatchblock visit try catch block in codevisitor visitor start beginning of the handler's scope inclusive end end of the handler's scope exclusive handler beginning of the handler's type internal name of the type of exceptions handled by the handler or to catch any exceptions for finally blocks specified by visitmaxs visit maxs in codevisitor visitor maxstack max stack maximum stack size of the maxlocals max locals maximum number of local variables for the specified by visitlocalvariable visit local variable in codevisitor visitor name the name of a local variable desc the type descriptor of this local variable start the first instruction corresponding to the scope of this local variable inclusive end the last instruction corresponding to the scope of this local variable exclusive index the local variable's index specified by visitlinenumber visit line number in codevisitor visitor line a line number this number refers to the source from which the was compiled start the first instruction corresponding to this line number indexes current positions of the instructions to be resized each instruction must be designated by the index of its last byte plus one or in other words by the index of the first byte of the next instruction sizes the number of bytes to be added to the above instructions more precisely for each i lt len sizes i bytes will be added at the end of the instruction designated by indexes i or if sizes i is negative the last |sizes i | bytes of the instruction will be removed the instruction size must not become negative or the gaps introduced by this must be filled in manually in the by the getcode get len the number of instruction to be resized must be smaller than or equal to indexes length and sizes length the indexes which now contains the new positions of the resized instructions designated as above the current size of the bytecode of this the current bytecode of this the bytecode is contained between the index 0 inclusive and the index getcodesize get size exclusive 