{{{ imports }}} {{{ instance variables lists of jarpaths jar paths }}} {{{ load jarpath jar path activatedependentifnecessary activate dependent if necessary no plugin maybe it is a library load extra jars that are part of this plugin check all other installed plugins to see if any of them use me reload those that do so the classloaders work together }}} {{{ getpath get path }}} {{{ findplugin find plugin }}} {{{ containsclass contains function }}} {{{ getcachepath get cache path }}} {{{ getdependencyset get dependency set todo check ? }}} {{{ getfile get }}} {{{ getclassloader get loader }}} {{{ getzipfile get zip }}} {{{ getactionset get action set }}} {{{ getbrowseractionset get browser action set }}} {{{ checkdependencies check dependencies each jar j a r listed in the plugin's jars property needs to know that we need them }}} {{{ getrequiredjars get required jars }}} {{{ getplugindepends get plugin depends }}} {{{ getdependencies get dependencies }}} {{{ getoptionaldependencies get optional dependencies }}} {{{ plugindepends plugin depends full e g plugin errorlist errorlist list 1 3 depends type e g jedit jdk plugin classname + e g errorlist errorlist list 1 3 just the name e g errorlist errorlist list only filled in if what is plugin }}} {{{ transitiveclosure transitive closure }}} {{{ getdependentplugins get dependent plugins }}} {{{ getoptionallydependentplugins get optionally dependent plugins }}} {{{ getalldependentplugins get all dependent plugins }}} {{{ getplugin get plugin }}} {{{ activateplugin activate plugin recursive call for thread safety }}} {{{ activateifnecessary activate if necessary default for plugins that don't specify this property ie 4 1 style plugins is to load them on startup 4 1 plugin 4 2 plugin if at least one property listed here is load the plugin }}} {{{ deactivateplugin deactivate plugin buffers retain a reference to the fold handler in question and the easiest way to handle fold handler unloading is this see if this is a 4 1 style plugin }}} {{{ getdockablesuri get dockables u r i }}} {{{ getservicesuri get services u r i }}} {{{ tostring to }}} {{{ members {{{ {{{ getplugincache get plugin cache with outdated cache }}} {{{ setplugincache set plugin cache }}} }}} {{{ pluginjar plugin j a r constructor }}} {{{ init }}} {{{ uninit }}} {{{ getclasses get classes }}} {{{ getresources get resources }}} }}} {{{ members {{{ actionspresentbutnotcoreclass actions present but not core }}} {{{ loadcache load cache check if a plugin with the same name is already loaded check if a plugin with the same name is already loaded this must be done before loading cachedproperties cached properties /* this should be before dockables are initialized */ }}} {{{ generatecache generate cache this must be done before loading cachedproperties cached properties check if a plugin with the same name is already loaded 						otherplugin 						other plugin getpluginjar get plugin j a r uninit }}} {{{ startplugin start plugin old plugins expected jedit j edit 4 1 style behavior where a propertieschanged properties changed was sent after plugins were started buffers retain a reference to the fold handler in question and the easiest way to handle fold handler loading is this == before loaded }}} {{{ startpluginlater start plugin later }}} {{{ breakplugin break plugin remove action sets dockables etc so that user doesn't see the broken plugin but we want properties to hang around }}} {{{ removeplugincache remove plugin cache }}} }}} {{{ plugincacheentry plugin cache entry {{{ instance variables }}} /* read and write must be kept perfectly in sync 
		 * its a very simple format doing it this way is
		 * faster than serializing since serialization calls
		 * reflection etc */ {{{ read }}} {{{ write }}} {{{ members {{{ readstring read }}} {{{ readuri read u r i }}} {{{ readstringarray read }}} {{{ readbooleanarray read }}} {{{ readmap read map }}} {{{ readlanguagesmap read languages map }}} {{{ writestring write }}} {{{ writestringarray write }}} {{{ writebooleanarray write }}} {{{ writemap write map }}} {{{ writelanguages write languages }}} }}} }}} 