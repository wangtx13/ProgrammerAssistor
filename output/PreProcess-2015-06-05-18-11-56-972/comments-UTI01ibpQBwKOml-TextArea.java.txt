{{{ imports }}} {{{ textarea text area constructor {{{ initialize some misc stuff }}} {{{ initialize the gui g u i some plugins add stuff in a right hand gutter }}} {{{ this ensures that the text area's look is slightly more consistent with the rest of the metal l f while it depends on not so well documented portions of it only affects appearance so future breakage shouldn't matter horizontal setborder set border }}} {{{ add some event listeners }}} this doesn't seem very correct but it fixes a problem when setting the initial caret position for a buffer eg from the recent list }}} {{{ getfoldpainter get fold painter }}} {{{ initinputhandler init input handler }}} {{{ getactioncontext get action context }}} {{{ setmousehandler set mouse handler }}} {{{ settransferhandler set transfer handler }}} {{{ tostring to chop off the last }}} {{{ dispose }}} {{{ getinputhandler get input handler }}} {{{ getpainter get painter }}} {{{ getgutter get gutter }}} {{{ getdisplaymanager get display manager }}} {{{ iscaretblinkenabled is caret blink enabled }}} {{{ setcaretblinkenabled set caret blink enabled }}} {{{ getelectricscroll get electric scroll }}} {{{ setelectricscroll set electric scroll }}} {{{ isquickcopyenabled is quick copy enabled }}} {{{ setquickcopyenabled set quick copy enabled }}} {{{ getbuffer get buffer }}} {{{ setbuffer set buffer dubious? setfirstline set first line 0 is the current buffer performing a compoundedit? compound edit? set new buffer old buffer did perform a compoundedit compound edit so open a compoundedit compound edit for new buffer }}} {{{ iseditable is editable }}} {{{ isdragenabled is drag enabled }}} {{{ setdragenabled set drag enabled }}} {{{ getjoinnonwordchars get join non word chars }}} {{{ setjoinnonwordchars set join non word chars }}} {{{ getctrlforrectangularselection get ctrl for rectangular selection }}} {{{ setctrlforrectangularselection set ctrl for rectangular selection }}} {{{ scrolling {{{ getfirstline get first line }}} {{{ setfirstline set first line {{{ ensure we don't have empty space at the bottom or top etc }}} }}} {{{ getfirstphysicalline get first physical line }}} {{{ setfirstphysicalline set first physical line }}} {{{ getlastphysicalline get last physical line }}} {{{ getlastscreenline get last screen line }}} {{{ getvisiblelines get visible lines }}} {{{ gethorizontaloffset get horizontal offset }}} {{{ sethorizontaloffset set horizontal offset }}} {{{ scrollupline scroll up line }}} {{{ scrolluppage scroll up page }}} {{{ scrolldownline scroll down line }}} {{{ scrolldownpage scroll down page }}} {{{ scrolltocaret scroll to caret }}} {{{ scrollto scroll to fix the case when the line is wrapped it was not possible to see the second or next subregion of a line {{{ get ready }}} {{{ scroll vertically we are scrolling to a position that is not on the screen }}} {{{ scroll horizontally }}} }}} {{{ addscrolllistener add scroll listener }}} {{{ removescrolllistener remove scroll listener }}} }}} {{{ screen line stuff {{{ getphysicallineofscreenline get physical line of screen line }}} {{{ getscreenlineofoffset get screen line of offset }}} {{{ getscreenlinestartoffset get screen line start offset }}} {{{ getscreenlineendoffset get screen line end offset }}} }}} {{{ offset conversion {{{ xytooffset xy to offset }}} {{{ xtoscreenlineoffset x to screen line offset }}} {{{ offsettoxy offset to x y }}} }}} {{{ painting {{{ invalidatescreenlinerange invalidate screen line range }}} {{{ invalidateline invalidate line }}} {{{ invalidatelinerange invalidate line range }}} }}} {{{ convenience {{{ getbufferlength get buffer length }}} {{{ getlinecount get line count }}} {{{ getlineofoffset get line of offset }}} {{{ getlinestartoffset get line start offset }}} {{{ getlineendoffset get line end offset }}} {{{ getlinelength get line length }}} {{{ gettext get text }}} {{{ getlinetext get line text }}} {{{ getvisiblelinetext get visible line text }}} {{{ getvisiblelinesegment get visible line segment }}} {{{ settext set text }}} {{{ selection {{{ selectall select all }}} {{{ selectline select line }}} {{{ selectparagraph select paragraph }}} {{{ selectword select word }}} {{{ selecttomatchingbracket select to matching bracket }}} {{{ selectblock select block we can't do the backward scan if start == 0 scan backwards trying to find a bracket reset count scan forward matching that bracket }}} {{{ lineinstructurescope line in structure scope }}} {{{ invertselection invert selection }}} {{{ getselectioncount get selection count }}} {{{ getselection get selection }}} {{{ getselectioniterator get selection iterator }}} {{{ selectnone select none }}} {{{ setselection set selection invalidate the old selection }}} {{{ addtoselection add to selection }}} {{{ getselectionatoffset get selection at offset }}} {{{ removefromselection remove from selection }}} {{{ resizeselection resize selection }}} {{{ extendselection extend selection }}} {{{ getselectedtext get selected text }}} {{{ setselectedtext set selected text no matter what happends stops us from leaving buffer in a bad state no no no!!!! selectnone select none }}} {{{ replaceselection replace selection for compatibility with older jedit j edit versions }}} {{{ getselectedlines get selected lines }}} }}} {{{ caret {{{ caretautoscroll caret auto scroll }}} {{{ addstructurematcher add structure matcher }}} {{{ removestructurematcher remove structure matcher }}} {{{ getstructurematchstart get structure match start }}} {{{ blinkcaret blink caret }}} {{{ centercaret center caret }}} {{{ scrollandcentercaret scroll and center caret }}} {{{ setcaretposition set caret position }}} {{{ movecaretposition move caret position }}} {{{ getcaretposition get caret position }}} {{{ getcaretline get caret line }}} {{{ getmagiccaretposition get magic caret position }}} {{{ setmagiccaretposition set magic caret position }}} {{{ addcaretlistener add caret listener }}} {{{ removecaretlistener remove caret listener }}} {{{ gotonextbracket go to next bracket }}} {{{ gotonextcharacter go to next character }}} {{{ gotonextline go to next line }}} {{{ gotonextpage go to next page }}} {{{ gotonextparagraph go to next paragraph }}} {{{ gotonextword go to next word }}} {{{ gotoprevbracket go to prev bracket }}} {{{ gotoprevcharacter go to prev character }}} {{{ gotoprevline go to prev line }}} {{{ gotoprevpage go to prev page }}} {{{ gotoprevparagraph go to prev paragraph }}} {{{ gotoprevword go to prev word }}} {{{ gotoprevword go to prev word }}} {{{ gotoprevword go to prev word }}} {{{ home }}} {{{ end }}} {{{ smarthome smart home case 3 }}} {{{ smartend smart end case 4 }}} {{{ gotostartofline go to start of line }}} {{{ gotoendofline go to end of line so that end followed by up arrow will always put caret at the end of the previous line for example setmagiccaretposition set magic caret position max_value }}} {{{ gotoendofcode go to end of replace comments with whitespace to find endofcode end of }}} {{{ gotostartofwhitespace go to start of white space }}} {{{ gotoendofwhitespace go to end of white space }}} {{{ gotofirstvisibleline go to first visible line }}} {{{ gotolastvisibleline go to last visible line }}} {{{ gotobufferstart go to buffer start }}} {{{ gotobufferend go to buffer end }}} {{{ gotomatchingbracket go to matching bracket }}} }}} {{{ user input {{{ userinput user input /* if the line is not manually indented */ }}} {{{ isoverwriteenabled is overwrite enabled }}} {{{ setoverwriteenabled set overwrite enabled }}} {{{ toggleoverwriteenabled toggle overwrite enabled }}} {{{ backspace }}} {{{ backspaceword backspace word }}} {{{ backspaceword backspace word }}} {{{ delete }}} {{{ deletetoendofline delete to end of line }}} {{{ deleteline delete line }}} {{{ deleteparagraph delete paragraph find the beginning of the paragraph find the end of the paragraph if !displaymanager !display manager islinevisible is line visible i 	continue loop }}} {{{ deletetostartofline delete to start of line }}} {{{ deleteword delete word }}} {{{ ismultipleselectionenabled is multiple selection enabled }}} {{{ togglemultipleselectionenabled toggle multiple selection enabled }}} {{{ setmultipleselectionenabled set multiple selection enabled }}} {{{ isrectangularselectionenabled is rectangular selection enabled }}} {{{ togglerectangularselectionenabled toggle rectangular selection enabled }}} {{{ setrectangularselectionenabled set rectangular selection enabled }}} }}} {{{ folding {{{ gotoparentfold go to parent fold }}} {{{ gotonextfold go to next fold }}} {{{ gotoprevfold go to prev fold }}} {{{ collapsefold collapse fold }}} {{{ expandfold expand fold }}} {{{ selectfold select fold }}} {{{ narrowtofold narrow to fold }}} {{{ narrowtoselection narrow to selection }}} {{{ addexplicitfold add explicit fold selection cannot be because there is at least 1 selection }}} }}} {{{ text editing {{{ linecomment line comment }}} {{{ rangecomment range comment }}} {{{ formatparagraph format paragraph }}} {{{ spacestotabs spaces to tabs }}} {{{ tabstospaces tabs to spaces }}} {{{ touppercase to upper case }}} {{{ tolowercase to lower case }}} {{{ removetrailingwhitespace remove trailing white space }}} {{{ insertenterandindent insert enter and indent if the line was already correctly indented the caret needs to be moved explicitly }}} {{{ inserttabandindent insert tab and indent if caret is inside leading whitespace indent }}} {{{ indentselectedlines indent selected lines }}} {{{ turnonelastictabstops turn on elastic tabstops }}} {{{ shiftindentleft shift indent left }}} {{{ shiftindentright shift indent right }}} {{{ joinlines join lines edit from end of selection to minimize invalidations and recaluculations of cached line info such as indent level or fold level if nothing selected or all selections span only one line join the line at the caret nothing to do if the caret is on the last line }}} }}} {{{ a w t stuff {{{ addleftofscrollbar add left of scroll bar }}} {{{ removeleftofscrollbar remove left of scroll bar }}} {{{ addnotify add notify }}} {{{ removenotify remove notify }}} {{{ getfocustraversalkeysenabled get focus traversal keys enabled }}} {{{ getfocuscycleroot get focus cycle root }}} {{{ processkeyevent process key event /* source=textarea source= t e x t a r e a 1 */ }}} {{{ addtopcomponent add top component }}} {{{ removetopcomponent remove top component }}} {{{ addtopleftcomponent add top left component }}} {{{ addtoprightcomponent add top right component }}} {{{ addbottomleftcomponent add bottom left component }}} {{{ addbottomleftcomponent add bottom left component }}} {{{ getinputmethodrequests get input requests }}} }}} {{{ addstatuslistener add status listener }}} {{{ removestatuslistener remove status listener }}} {{{ propertieschanged properties changed call this only if it was previously off calculate an average to use a reasonable value for propotional fonts }}} {{{ addactionset add action set }}} {{{ getmarkposition get mark position }}} {{{ members {{{ instance variables }}} {{{ iscaretvisible is caret visible }}} {{{ isstructurehighlightvisible is structure highlight visible }}} {{{ updatemaxhorizontalscrollwidth update max horizontal scroll width }}} {{{ recalculatevisiblelines recalculate visible lines this does the trick to eliminate blank space at the end }}} {{{ foldstructurechanged fold structure changed cannot use selectnone select none because the finishcaretupdate finish caret update will reopen the fold }}} {{{ updatescrollbar update scroll bar }}} {{{ _finishcaretupdate /* called by displaymanager display manager bufferchangehandler buffer change handler transactioncomplete transaction complete */ when the user is typing etc we don't want the caret to blink if we've jumped outside of a narrowed display just reset all folds to their default level so that we don't get disconnected islands of visible lines in case one of the above fails we still want to clear these flags }}} {{{ invalidatestructurematch invalidate structure match }}} {{{ startdraganddrop start drag and drop }}} {{{ firenarrowactive fire narrow active }}} }}} {{{ members {{{ variables }}} {{{ instance variables jdiff j diff list add stuff here see finishcaretupdate finish caret update _finishcaretupdate }}} {{{ _sethorizontaloffset scrolling with trackpad or other device should be kept inside bounds }}} {{{ invalidateselectedlines invalidate selected lines to hide line highlight if selections are being added later on }}} {{{ finishcaretupdate finish caret update /* otherwise displaymanager display manager bufferchangehandler buffer change handler calls */ }}} {{{ firecaretevent fire caret event }}} {{{ firescrollevent fire scroll event }}} {{{ firestatuschanged fire status changed }}} {{{ firebracketselected fire bracket selected }}} {{{ _changeline }}} {{{ linecontainsspaceandtabs line contains space and tabs }}} {{{ insert don't overstrike if we're on the end of the line }}} {{{ inserttab insert tab }}} {{{ userinputtab user input tab }}} {{{ dowordwrap do word wrap only wrap if we're at the end of a line or the rest of the line text is whitespace last character before wrap length with tabs expanded caretline caret line would have been incremented since insertnewlineat insert new line at <= caretpos caret pos /* only ever if space was pressed
		 * with logicallength logical length == maxlinelen max line len */ }}} {{{ updatestructurehighlightwithdelay update structure highlight with delay }}} {{{ updatestructurehighlight update structure highlight }}} {{{ showstructurestatusmessage show structure status message get rid of embedded tabs not removed by trim }}} {{{ recalculatelastphysicalline recalculate last physical line }}} {{{ getrectparams get rect params }}} {{{ deletenextcharacter delete next character delete a point or combining character sequence at once }}} {{{ deleteprevcodepoint delete prev point delete a point this is the behavior of backward removal on windows notepad }}} {{{ delete }}} {{{ tallcaretdelete tall caret delete }}} {{{ shifttallcaretleft shift tall caret left }}} {{{ setmaxlinelength set max line length }}} {{{ addexplicitfold add explicit fold need to fix the caret position so that we get the right rule taking the start offset one char ahead and the end offset one char behing makes sure we get the right rule for the text being wrapped tricky around mode boundaries e g php embedded in html h t m l add a new line if there's text after the comment we're inserting always insert a new line if there's no comment character if we're inserting a line comment into a non empty line we'll need to add a line break so we don't comment out existing always insert a new line if there's no comment character }}} {{{ rangelinecomment range line comment }}} {{{ joinline join line }}} }}} {{{ isrightclickpopupenabled is right click popup enabled }}} {{{ setrightclickpopupenabled set right click popup enabled }}} {{{ getrightclickpopup get right click popup }}} {{{ setrightclickpopup set right click popup }}} {{{ handlepopuptrigger handle popup trigger rebuild popup menu every time the menu is requested }}} {{{ createpopupmenu create popup menu }}} {{{ showpopupmenu show popup menu open the context menu below the caret }}} {{{ showpopupmenu show popup menu copied from guiutilities g u i utilities err x overflow err y= + y + offsety= offset y= + offsety offset y 	+ size height= + size height 	+ win height= + win getheight get height }}} {{{ character boundary staffs {{{ linecharacterbreaker line character breaker shared context among some operations which are aware of characters above bmp b m p and combining character sequence this means a end of line then it is safe to assume 1 unit is a character this may an offset beyond the length of buffer but it is a callers responsibility this means a start of line then it is safe to assume 1 unit is a character this may 1 but it is a callers responsibility {{{ chariterator char iterator this adapt charsequence char sequence which is used to avoid text copy to characteriterator character iterator which is used to pass a text to breakiterator break iterator there should be a bug in caller stacktrace will be enough }}} }}} }}} {{{ inner classes {{{ caretblinker caret blinker {{{ actionperformed action performed }}} }}} {{{ mutablecaretevent mutable caret event {{{ mutablecaretevent mutable caret event constructor }}} {{{ getdot get dot }}} {{{ getmark get mark }}} }}} {{{ adjusthandler adjust handler {{{ adjustmentvaluechanged adjustment value changed }}} }}} {{{ focushandler focus handler {{{ focusgained focus gained }}} {{{ focuslost focus lost }}} }}} {{{ mousewheelhandler mouse wheel handler wheel orientation is reversed so we negate the charwidth }}} {{{ requestfocuslayerui request focus layer u i {{{ processmouseevent process mouse event }}} {{{ installui install u i }}} {{{ uninstallui uninstall u i }}} }}} }}} {{{ initializer }}} 