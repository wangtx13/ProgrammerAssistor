/*
	notes /*
	 notes 
	it 
	 it would not be hard to eliminate the use of objectweb asm type from
	this making the distribution a tiny bit smaller 
*/ split the into constructors and regular lists for inner classes /*strict*/ force the for now generate the bsh instance 'this' ' this' reference holder field generate the bsh reference holder field generate the fields don't generate or loosely typed fields note loose types aren't currently parsed anyway generate the constructors don't generate constructors if no other constructors generate a default constructor /*index*/ generate the delegate don't generate /*or loosely typed */ /*|| returntype type == null*/ /*value*/ map loose type to generate body generate to push the bshthis b s h t h i s or bshstatic b s h s t a t i c field push 'this' get the instance field push the name of the as a constant generate to push arguments as an push nulls for various args of invokemethod interpreter callstack callerinfo push the constant 'true' for declaredonly declared only the this invokemethod name sig generate to unwrap bsh primitive types generate to the value need to calculate this just fudging here for now create this constructor generate to push arguments as an /*isstatic*/ /*is static*/ generate the implementing the alternate constructor switch generate to the classgeneratorutil generator initinstance init instance push 'this' push the class/constructor name as a constant push arguments as an the initinstance init instance need to calculate this just fudging here for now generate to call classgeneratorutil generator to get our switch index and give us args push super name use superclassname super name var? push this push args push this constructor index number onto stack the classgeneratorutil generator getconstructorsargs get constructors args store constructorargs constructor args in consargsvar cons args var get the constructorargs constructor args selector field from constructorargs constructor args push constructorargs constructor args start switch /*min*/ /*max*/ generate switch body generate the default branch of switch default branch always no args super push 'this' done with switch /*
		generate /*
		 generate a branch of the constructor switch this is called by
		generateconstructorswitch by
		generate constructor switch 
		the 
		 the generated by this assumes that the argument is 
		on the stack 
	*/ cv visitlinenumber visit line number index labels index push this before args unload the arguments from the constructorargs constructor args the iterator on the constructorargs constructor args push the constructorargs constructor args if it's an type we must do a check cast the constructor for this branch maybe combine this with generatemethod generate map loose to add body push vars need to calculate this just fudging here for now ok? technically incorrect here we need to wrap values as bsh primitive n u l l however the this invokemethod will do that much for us we need to generate a conditional here to test for and primitive n u l l /*if returntype type equals s */ type is correct here auto gen default constructor use default super constructor use default super constructor determine if the constructor calls this or super use default super constructor make a tmp namespace to hold the original constructor args for use in eval of the node /*modifiers*/ evaluate the args find the matching super constructor for the args find the matching this constructor for the args this constructors come after super constructors in the table are we choosing ourselves recursively through a this reference? check to see if the instance has already been initialized the case if using a this alternate constuctor xxx x x x clean up this conditional create the instance 'this' ' this' namespace set it on the instance and the instance initializer get the this reference from the proto instance get the instance initializer block from the this create the instance namespace set the instance this reference on the instance /*strict*/ give the instance space its should use try/finally here to pop ns evaluate the instance portion of the block in it evaluate the initializer block /*override*/ the instance has already been initialzed by another constructor fall through to the constructor body below the constructor from the instancethis instance this find the constructor now in the instance namespace /*declaredonly*/ /*declared only*/ if args we must have constructor evaluate the constructor /*callerinfo*/ /*caller info*/ /*overridenamespace*/ /*override name space*/ unwrap primitive to right? can this be factored out ? should be be adding the l here instead? 