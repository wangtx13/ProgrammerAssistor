{{{ imports }}} {{{ jeditbuffer j edit buffer constructors {{{ need to convert entries of 'props' to propvalue prop value instances }}} fill in defaults for these from properties if the corresponding buffer xxx x x x properties not set corresponding buffer xxx x x x properties not set }}} {{{ flags {{{ isdirty is dirty }}} {{{ isloading is loading }}} {{{ setloading set loading }}} {{{ isperformingio is performing i o }}} {{{ setperformingio set performing i o }}} {{{ iseditable is editable }}} {{{ isreadonly is read only }}} {{{ setreadonly set read only }}} {{{ setdirty set dirty fixes dirty flag not being reset on save/insert/undo/redo/undo this ensures that undo can clear the dirty flag properly when all edits up to a save are undone }}} }}} {{{ thread safety {{{ readlock read lock }}} {{{ readunlock read unlock }}} {{{ writelock write lock }}} {{{ writeunlock write unlock }}} }}} {{{ line offset {{{ getlength get length no need to lock since this just a value and that's it }}} {{{ getlinecount get line count no need to lock since this just a value and that's it }}} {{{ getlineofoffset get line of offset }}} {{{ getlinestartoffset get line start offset }}} {{{ getlineendoffset get line end offset }}} {{{ getlinelength get line length }}} {{{ getpriornonemptyline get prior non empty line didn't find a line that contains non whitespace chars so index of prior whitespace line }}} }}} {{{ text getters and setters {{{ getlinetext get line text }}} {{{ getlinesegment get line segment }}} {{{ gettext get text }}} {{{ getsegment get segment }}} {{{ insert }}} {{{ remove /* otherwise it will be delivered later */ }}} }}} {{{ indentation {{{ removetrailingwhitespace remove trailing white space blank line no whitespace }}} {{{ shiftindentleft shift indent left }}} {{{ shiftindentright shift indent right silly usability hack if lines length != 1 whitespace white space == 0 	continue }}} {{{ indentlines indent lines }}} {{{ simpleindentline simple indent line do it }}} {{{ indentline indent line do it }}} {{{ getcurrentindentforline get current indent for line }}} {{{ getidealindentforline get ideal indent for line }}} {{{ getidealindentforline get ideal indent for line }}} {{{ getvirtualwidth get virtual width }}} {{{ getoffsetofvirtualcolumn get offset of virtual column }}} {{{ insertatcolumn insert at column }}} {{{ insertindented insert indented obtain the leading indent for later use note that if firstline first line == lastline last line loop does not execute }}} {{{ iselectrickey is electric key mode can be though that's probably an further up }}} }}} {{{ syntax highlighting {{{ marktokens mark tokens /* do nothing */ }}} {{{ gettokenmarker get token marker }}} {{{ settokenmarker set token marker don't do this on initial token marker }}} {{{ createposition create position }}} }}} {{{ property {{{ propertieschanged properties changed }}} {{{ gettabsize get tab size }}} {{{ getindentsize get indent size }}} {{{ getproperty get property first try the buffer local properties for backwards compatibility }}} {{{ getdefaultproperty get default property }}} {{{ setproperty set property do nothing }}} {{{ setdefaultproperty set default property }}} {{{ unsetproperty unset property }}} {{{ resetcachedproperties reset cached properties need to reset properties that were cached defaults since the defaults might have changed }}} {{{ getstringproperty get property }}} {{{ setstringproperty set property }}} {{{ getbooleanproperty get property }}} {{{ setbooleanproperty set property }}} {{{ getintegerproperty get property will be cached from now on }}} {{{ setintegerproperty set property }}} {{{ getpatternproperty get pattern property will be cached from now on }}} {{{ getrulesetatoffset get rule set at offset }}} {{{ getkeywordmapatoffset get keyword map at offset }}} {{{ getcontextsensitiveproperty get context sensitive property }}} {{{ getmode get mode }}} {{{ setmode set mode /* this protects against stupid people like me 
		 * doing stuff like buffer setmode set mode jedit j edit getmode get mode */ }}} }}} {{{ folding {{{ isfoldstart is fold start }}} {{{ isfoldend is fold end }}} {{{ invalidatecachedfoldlevels invalidate cached fold levels }}} {{{ getfoldlevel get fold level update preceding fold levels if necessary }}} {{{ getfoldatline get fold at line }}} {{{ getfoldhandler get fold handler }}} {{{ setfoldhandler set fold handler }}} }}} {{{ undo {{{ undo }}} {{{ redo }}} {{{ istransactioninprogress is transaction in progress }}} {{{ begincompoundedit begin compound edit }}} {{{ endcompoundedit end compound edit }}} {{{ insidecompoundedit inside compound edit }}} {{{ isundoinprogress is undo in progress }}} {{{ getundoid get undo }}} }}} {{{ buffer events {{{ addbufferlistener add buffer listener }}} {{{ removebufferlistener remove buffer listener }}} {{{ getbufferlisteners get buffer listeners }}} {{{ setundolimit set undo limit }}} {{{ canundo can undo }}} {{{ canredo can redo }}} {{{ iscontextinsensitive is context insensitive }}} {{{ setcontextinsensitive set context insensitive }}} }}} {{{ members {{{ event firing {{{ firefoldlevelchanged fire fold level changed }}} {{{ firecontentinserted fire content inserted }}} {{{ firecontentremoved fire content removed }}} {{{ fireprecontentinserted fire pre content inserted }}} {{{ fireprecontentremoved fire pre content removed }}} {{{ firebeginundo fire begin undo }}} {{{ fireendundo fire end undo }}} {{{ firebeginredo fire begin redo }}} {{{ fireendredo fire end redo }}} {{{ firetransactioncomplete fire transaction complete }}} {{{ firefoldhandlerchanged fire fold handler changed }}} {{{ firebufferloaded fire buffer loaded }}} }}} {{{ isfilereadonly is read only }}} {{{ setfilereadonly set read only }}} {{{ loadtext load text for `reload' command contentmgr content mgr remove changes this! theoretically a segment could have seg offset != 0 but segmentbuffer segment buffer never does that }}} {{{ invalidatefoldlevels invalidate fold levels }}} {{{ parsebufferlocalproperties parse buffer local properties first line for last 10 lines make sure not to overlap with the first 10 }}} {{{ marktokens mark tokens }}} {{{ used to store property values }}} }}} {{{ members synchronization done in textarea text area propertieschanged properties changed {{{ getlistener get listener }}} {{{ contentinserted content inserted }}} {{{ parsebufferlocalproperties parse buffer local properties encoding mustn't be set this way as it must be equal to encoding used to load or save the use the low level property setting so that if we have a buffer local property with the same value as a default later changes in the default don't affect the buffer local property }}} {{{ getindentrules get indent rules }}} {{{ updatecolumnblocks update column blocks while currentline<=endline current line<=end line block populatetabsizes populate tab sizes }}} {{{ gettabstopposition get tab stop position }}} {{{ indentusingelastictabstops indent using elastic tabstops }}} {{{ getcolumnblock get column block }}} }}} 