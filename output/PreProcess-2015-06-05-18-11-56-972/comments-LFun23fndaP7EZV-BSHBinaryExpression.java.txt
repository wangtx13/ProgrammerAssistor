/*
			doing /*
			 doing instanceof? next node is a type 
		*/ ref is not instance of any type /*
			 primitive number or cannot be tested for instanceof
 if lhs instanceof primitive 
				throw new evalerror eval cannot be instance of primitive type 
		*/ /*
				primitive /*
				 primitive number or is not normally an instanceof
				anything but for internal use we'll test for the
				bsh primitive 
				i e 5 instanceof bsh primitive will be true
			*/ general case performe the instanceof based on assignability the following two checks were tacked on this could probably be smoothed out /*
			look /*
			 look ahead and short circuit evaluation of the rhs if 
				we're a and a n d and the lhs is 
		*/ /*
			look /*
			 look ahead and short circuit evaluation of the rhs if 
				we're a and a n d and the lhs is 
		*/ end stuff that was tacked on for short circuiting /*
			are /*
			 are both the lhs and rhs either wrappers or primitive values?
			do binary op
		*/ special case for eq e q on two wrapper /* 
					don't 
					 don't auto unwrap wrappers preserve identity semantics 
					fall 
					 f a l l through t h r o u g h to t o o b j e c t operations o p e r a t i o n s below b e l o w 
				*/ /*
	doing /*
	 doing the following makes it hard to use untyped vars 
	e g if arg == what if arg is a primitive?
	the primitive?
	 the answer is that we should test only if the var is typed ?
	need to get that info here 

		else
		{
		 do we have a mixture of primitive values and non primitives ? 
		 primitivevalue primitive value = not not 

		int primcount prim count = 0 
		if isprimitivevalue is primitive value lhs 
			++primcount 
			++prim count 
		if isprimitivevalue is primitive value rhs 
			++primcount 
			++prim count 

		if primcount prim count > 1 
			 both primitive types should have been handled above
			throw new interpretererror interpreter should not be here 
		else 
		if primcount prim count == 1 
			 mixture of one and the other
			throw new evalerror eval operator ' + tokenimage token image kind 
				+ ' inappropriate for / primitive combination 
				this callstack 

		 else fall through to handle both non primitive types

		 end check for primitive and non primitive mix 
		}
	*/ /*
			treat /*
			 treat lhs and rhs as arbitrary and do the operation 
			 including n u l l and v oid represented by their primitive types 
		*/ out binary op arbitrary obj { +lhs+ } { +rhs+ } fall f a l l through t h r o u g h to t o default d e f a u l t case!!! c a s e!!! /*
		object is a non and non primitive type
	*/ /*
		object is a wrapper for char or number type
	*/ 