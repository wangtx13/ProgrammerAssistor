{{{ imports }}} {{{ searchbar search bar constructor {{{ create the timer used by incremental search not found at all }}} if 'temp' is hide search bar after user is done with it }}} {{{ getfield get field }}} {{{ sethypersearch set hyper search }}} {{{ update }}} {{{ propertieschanged properties changed option may have been changed }}} {{{ members {{{ instance variables close button only there if 'isremovable' 'is removable' is }}} {{{ find {{{ if nothing entered show search and replace dialog box }}} {{{ hypersearch hyper search }}} {{{ incremental search on enter start search from end of current match to find next one not found start from beginning not found at all inform user search restarted beep if beep property set }}} }}} {{{ incrementalsearch incremental search /* for example if the current fileset is a directory 
		 * c+g will find the next match within that fileset 
		 * this can be annoying if you have just done an
		 * incremental search and want the next occurrence
		 * in the current buffer */ invalid regexp ignore to avoid annoying beeping while typing a re }}} {{{ timerincrementalsearch timer incremental search }}} {{{ setclosebuttonvisibility set close button visibility }}} }}} {{{ inner classes {{{ actionhandler action handler {{{ actionperformed action performed }}} }}} {{{ documenthandler document handler {{{ insertupdate insert update on insert start search from beginning of current match this will continue to highlight the current match until another match is found }}} {{{ removeupdate remove update on backspace restart from beginning don't beep if not found subsequent beeps are very annoying when backspacing an invalid search reverse regexp search not supported yet so 'simulate' with restart }}} {{{ changedupdate changed update }}} }}} {{{ keyhandler key handler }}} {{{ focushandler focus handler }}} }}} 