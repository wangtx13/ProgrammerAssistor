{{{ imports }}} /* by default only download plugin lists every 5 minutes */ /* download the plugin list while trying to show informative messages 
		 * currently when 
		 * the proxy requires authentication
		 * another http h t t p happens may be good to know that the site is broken 
		 * the host can't be reached reported as internet access 
		 * otherwise only an message is logged in the activity log 
		 **/ {{{ addplugin add plugin }}} {{{ addpluginset add plugin set }}} {{{ finished after the entire list is loaded fill out plugin field in dependencies }}} {{{ dump }}} {{{ getmirrorid get mirror }}} {{{ pluginset plugin set }}} {{{ plugin installed installedversion installed /* check if the plugin is already installed 
			 this is a bit of hack
			pluginjar hack
			 plugin j a r jars = jedit j edit getpluginjars get plugin j a rs 
			for i = 0 i < jars length i++ 
			{
				string 
			{
				 path = jars i getpath get path 
				if !new path 
					continue 

				if miscutilities misc utilities getfilename get name path equals jar 
				{
					installed = path 

					editplugin 

					 edit plugin plugin = jars i getplugin get plugin 
					if plugin != 
					{
						installedversion 
					{
						installed = jedit j edit getproperty get property 
							 plugin + plugin getclassname get name 
							+ 
					}
					break 
				}
			}

			string 
				}
			}

			 notloaded not loaded = jedit j edit getnotloadedpluginjars get not loaded plugin j a rs 
			for i = 0 i < notloaded not loaded length i++ 
			{
				string 
			{
				 path = notloaded not loaded i 

				if miscutilities misc utilities getfilename get name path equals jar 
				{
					installed = path 
					break 
				}
			} */ branch satisfydependencies satisfy dependencies roster installdirectory install directory 	downloadsource 	download source }}} {{{ branch }}} {{{ dependency only used if what is plugin }}} {{{ members }}} 