weka core instances /*
 medoidevaluator medoid evaluator classifier classifier 
			 scoringlabel scoring label 
			 combiningstrategy combining strategy combiningstrategy combining strategy 
			 mergefirst merge first {
		super classifier scoringlabel scoring label 
		this combiningstrategy combining strategy = combiningstrategy combining strategy 
		this mergefirst merge first = mergefirst merge first 
	system 
	 out using centroid evaluator 2 

	}
 */ scores a cluster based on link between medoid of each cluster average weighted average where weights are proportional to similarity to medoid cross boundary intra cluster1 intra cluster2 a bettter strategy would use caching to incrimentally determine the centroid indices 0 scores i = getscore get score pwn centidx=indices cent idx=indices i /*
	public evaluate neighbor neighbor {
 		if ! neighbor instanceof agglomerativeneighbor agglomerative neighbor 
 			throw new illegalargumentexception illegal argument expect agglomerativeneighbor agglomerative neighbor not + neighbor getclass get getname get name 

		clustering 

		 clustering original = neighbor getoriginal get original 
		int mergedindices merged indices = agglomerativeneighbor agglomerative neighbor neighbor getnewcluster get new cluster 
		arraylist 
		 list scores = new arraylist list 
 		for i = 0 i < mergedindices merged indices length i++ {
			for j = i + 1 j < mergedindices merged indices length j++ {
				if original getlabel get label mergedindices merged indices i != original getlabel get label mergedindices merged indices j || mergefirst merge first {
					agglomerativeneighbor {
					 agglomerative neighbor pwneighbor =
						new agglomerativeneighbor agglomerative neighbor original 	original 
																			mergedindices 
																			merged indices i mergedindices merged indices j 
					scores add new getscore get score pwneighbor 
				}
			}
		}

		if scores size < 1 
			throw new illegalstateexception illegal state no pairs of instances were scored 
		
 		double vals = new scores size 
		for i = 0 i < vals length i++ 
			vals i = scores get i doublevalue value 
 		return combiningstrategy combining strategy combine vals 
	}
 */ 