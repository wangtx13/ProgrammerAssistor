gsc 08/25/08 made changes to all tests after removing the option for usesparseweights use sparse weights from memmtrainer m e m m trainer now the users has to set the weights manually irrespective of above changes two tests fail testspacemaximizable test space maximizable testspaceserializable test space serializable data = { testmemm test m e m m data 0 } testmemm test m e m m data 1 testmemm test m e m m data 2 testmemm test m e m m data 3 } data = { ab } crf4 c r f4 memm = new crf4 c r f4 p memm gathertrainingsets gather training sets training annoying a n n o y i n g need to set up per instance training sets set weights dimension gathers training sets etc memm print memm printgradient print gradient = memm printinstancelists print instance lists memm setgaussianpriorvariance set gaussian prior variance positive_infinity should print at end 4 4 3 unconstrainedcost= unconstrained cost= 2912 0 constrainedcost= constrained cost= 428 0 mincost=35770 min cost=35770 0 mingrad=520 min grad=520 0 create a to store the crf c r f store the dictionary inputalphabet input alphabet = feature alphabet crf getinputalphabet get input alphabet and read it back in 	 memm m e m m optimizablecrf optimizable c r f mcrf = crf getmaximizablecrf get maximizable c r f ilist out unconstrainedcost= unconstrained cost= +unconstrainedcost+ +unconstrained cost+ constrainedcost= constrained cost= +constrainedcost +constrained cost startlabelindex start label index = as getalphabet get alphabet lookupindex lookup index start memmt setusesparseweights set use sparse weights usesparseweights use sparse weights and read it back in {0} /*{1} { 1 0} {0 1} */ 	 { 2 1 0} {0 1 2} { 3 2 1} {1 2 3} { 2 1} { 1 0} {0 1} {1 2} { 3 2 1} { 2 1 0} { 1 0 1} {0 1 2} {1 2 3} new printinputandtarget print input and target compare 3 crfs c r fs trained with addordernstates add order n states and make sure that having more features leads to a higher likelihood prevent cached values do this elaborate thing so that crf cachedvaluestale cached value stale is forced /*
		testsuite /*
		 test suite thesuite the suite 
		if args length > 0 {
			thesuite {
			the suite = new testsuite test suite 
			for i = 0 i < args length i++ {
				thesuite {
				the suite addtest add test new testmemm test m e m m args i 
			}
		} else {
			thesuite {
			the suite = testsuite test suite suite 
		}

		junit textui testrunner test runner run thesuite the suite 
*/ 