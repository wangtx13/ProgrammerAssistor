specify which predictions are to be added as features e g { 1 2 } = add labels of the top 2 highest scoring predictions as features the trained token classifier whether to treat each instance's feature values as binary whether the pipe is currently being used at production time i e not being used as pipeline for training a transducer augmented data alphabet that includes the predictions add the token prediction features to the alphabet evaluate token classifier for passing instances to the token classifier each instance's data alphabet needs to match that used by the token classifier at training time for the resulting piped instance each instance's data alphabet needs to contain token classifier's prediction as features this monstrosity is necessary b/c classifiers obtain the data/target alphabets via pipes for i = 0 i < ilist size i++ ret add convert ilist get i alphabetspipe alphabets pipe serialization number of folds in cross validation training random seed to split training data for cross validation trainer for token classifier token classifier trained on the entirety of the training set table storing instance name > out of fold classifier used to prevent overfitting to the token classifier's predictions 			this new adaboostm2trainer ada boost m2 trainer new decisiontreetrainer decision tree trainer 2 10 trainlist train list randseed rand seed numcv num c v 			this new naivebayestrainer naive bayes trainer trainlist train list randseed rand seed numcv num c v 			this new svmtrainer s v m trainer trainlist train list randseed rand seed numcv num c v train the token classifier train a classifier on the entire training set train classifiers using cross validation /*for x = 0 x < t2 size x++ {
					logger info xxx pred + t2 getclassification get classification x getlabeling get labeling getbestlabel get best label + + t2 getclassification get classification x getinstance get instance getlabeling get labeling 
				}*/ serialization 