if this is then the vector is dense if this is then the vector is binary if at least one value = inf or +inf + inf size was pretty much ignored??? why? this also removes duplicates create a dense vector create a vector that is possibly binary or non binary create a binary vector xxx fix sparsevector sparse vector so that it can properly represent a vector that has all zeros does this work? if all the property list features are binary make a binary sparsevector sparse vector even if the constructor argument binary is this will significantly save space as well as multiplication time later! akm 12/2007 afv print out sparsevector sparse vector binary= +binary pl print out sparsevector sparse vector adding +iter getkey get key + +iter getnumericvalue get numeric value out sparsevector sparse vector afv adding +iter getkey get key + afv numlocations= num locations= +afv numlocations num locations afv print xxx not so efficient? out sparsevector sparse vector sv numlocations= num locations= +sv numlocations num locations xxx what do we for the length? it could be higher than this index xxx this is pretty unsatisfactory since there may be zero values above this location necessary for the svm s v m implementation! dmetzler but be careful this is allowed to be null! cas necessary for the svm s v m implementation! dmetzler but be careful this is allowed to be null! cas xxx this is just the number of non zero entries this is different behavior than matrix2!! this is just the highest index that will have non zero value the full size of this dimension is unknown special case for dense sparse vector idx2 not present in this ignore special case for dense sparse vector idx2 not present in this ignore special case for dense sparse vector idx1 not present in v zero idx2 not present in this ignore yanked from densevector dense vector sets inf * 0 = 0 inf * 0 = 0 decide in which direction to do the dot product this is a heuristic choice based on efficiency and it could certainly be more complicated sets inf * 0 = 0 inf * 0 = 0 this ensures minimal computational effort sparse sparsevector sparse vector dense sparsevector sparse vector binary sparsevector 		for i = 0 i < values length i++ 			if isnan is na n values i 				return 		return gsc similar to isnan is na n but checks for infinite values gsc if any value is either nan na n or infinite sortindices sort indices modified by limin yao it's dense and thus by definition sorted just bubblesort bubble sort this is efficient when already mostly sorted note that we bubblesort bubble sort from the the end forward this is most efficient when we have added a few additional items to the end of a previously sorted list we could be much smarter if we remembered the highest index that was already sorted swap both indices and values if values == argument zero is special value meaning that this function should count them / serialization be sure to sort/compress our data before we write it 