acrftrainer a c r f trainer constructor /*
	public threadedtrain threaded train acrf a c r f acrf 
																instancelist 
																 instance list traininglist training list 
																instancelist 
																 instance list validationlist validation list 
																instancelist 
																 instance list testset test set 
																acrfevaluator 
																 a c r f evaluator eval 
																int numiter num iter 
	{
		maximizable 
	{
		 maximizable bygradient by gradient macrf = acrf getthreadedmaximizable get threaded maximizable traininglist training list 
		return train dcrf traininglist training list validationlist validation list testset test set 
													eval numiter num iter mdcrf 
	}
*/ 		maximizer 		 maximizer bygradient by gradient maximizer = new bolddriver bold driver 		maximizer 		 maximizer bygradient by gradient maximizer = new gradientdescent gradient descent early stopping reasonably conservative if we get a maximizing reset lbfgs l b f g s memory and try again if we get an on the second try too then just give up early stopping ignore cutoff if we're about to reset l bfgs b f g s don't cache test set if no evaluator specified keep going blindly don't cache test set set test set caching back to normal 		results printconfusion print confusion 			system 			 out \n\ninstance \n\n instance 			system 			 out target 			system 			 out time +i 		results printconfusion print confusion confusion matrix marginals of confusion matrix per precision recall and f1 measuring accuracy of each factor measuring joint accuracy this isn't pretty but i swear there's not an easy way and per label accuracy 				system 				 out ltarget+ vs +lret measure joint accuracy compute marginals of confusion matrix assumes that confusion i j means label i and label j compute per precision recall and f1 testresults test results acrftrainer a c r f trainer 