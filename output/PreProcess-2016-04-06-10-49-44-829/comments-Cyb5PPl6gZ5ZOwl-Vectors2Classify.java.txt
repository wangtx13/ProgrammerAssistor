arg in dataset reportoption=arg report option=arg essentially an enum mapping names to enums to ints convert options like report train accuracy report test f1=labela f1=label a to of options first split the argument at semicolon out argi + + this value argi out report option arg + reportoptionarg report option arg find the datasource test train validation find the report option accuracy f1 confusion raw mark the dataset data set reportionoption reportion option pair as selected make sure a label was specified for f1 pass through the argument /*	static commandoption command option pipefile pipe = new commandoption command option string
		  string
		 vectors2classify vectors2 classify output pipe filename f i l e n a m e classifier_pipe mallet 
		 the filename in which to write the classifier's instancepipe instance pipe after it has been trained */ 	static commandoption command option printtrainaccuracyoption print train accuracy option = new commandoption command option 	 vectors2classify vectors2 classify print train accuracy true|false 	 after training run the resulting classifier on the instances included in training 	 + and print the accuracy 	static commandoption command option printtestaccuracyoption print test accuracy option = new commandoption command option 	 vectors2classify vectors2 classify print test accuracy true|false 	 after training run the resulting classifier on the instances not included in training 	 + and print the accuracy process the command line options handle default trainer here for now default argument processing doesn't work force postprocessing of default value install special formatting for progress messages find console handler on root logger change formatter to one that knows about progress messages normal case input specified read in the instancelist instance list from stdin if the input filename is user specified separate files for testing and training sets 		for i=0 i<3 i++ { 			for j=0 j<4 j++ { 				system 				 out print + reportoptions report options i j 			} 			system 			 out 		} infogain info gain ig = new infogain info gain ilists 0 igl = math min 10 ig numlocations num locations for i = 0 i < igl i++ out infogain info gain +ig getobjectatrank get at rank i + = +ig getvalueatrank get value at rank i ig print featureselection feature selection selectedfeatures selected features = new featureselection feature selection ig 8000 ilists 0 setfeatureselection set feature selection selectedfeatures selected features oddsratiofeatureinducer odds ratio feature inducer orfi = new oddsratiofeatureinducer odds ratio feature inducer ilists 0 orfi inducefeatures induce features ilists 0 out training with +ilists 0 size + instances assert ilists 1 size > 0 gdruck only perform evaluation if requested in report options gdruck only perform evaluation if requested in report options new reporting raw output train validation test end for each trainer end for each trial new reporting train|test|validation accuracy|f1|confusion|raw end for each trainer parse something like maxent gaussianpriorvariance=10 gaussian prior variance=10 numiterations=20 num iterations=20 first split the argument at commas massage constructor name so that maxent max ent maxenttrainer max ent trainer new maxenttrainer max ent trainer all call new maxenttrainer max ent trainer if contains pass it though add parens if they forgot make trainer name from classifier name find associated with the we just built find setters corresponding to parameter names todo check for val present! out + j + name is + j getname get name out set + character touppercase to upper case parametername parameter name charat char at 0 + parametername parameter name substring 1 out matched + j getname get name ptypes = j getparametertypes get parameter types out parameter types for k=0 k<ptypes length k++ { out + k + = + ptypes k getname get name } out argument types for k=0 k<parameterlist k<parameter list length k++ { out + k + = + parameterlist parameter list k getclass get getname get name } 