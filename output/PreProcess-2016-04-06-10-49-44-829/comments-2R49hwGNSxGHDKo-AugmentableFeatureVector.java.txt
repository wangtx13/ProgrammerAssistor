max index with valid indices or values value /* if indices != top of values and indices 
																					 may be unsorted indices */ xxx also make constructors for dense vectors and add the appropriate functionality in below set this size and this maxsortedindex max sorted index if not already set via sortindices sort indices and removeduplicates remove duplicates yyy out augmentablevector augmentable vector +dict size + adding +iter getkey get key + +iter getnumericvalue get numeric value mdredze@cs jhu edu 3/5/10 use values instead of assuming fv is binary add index 1 0 aims to be cheap constant time when indices != ??? ??? out indices length= +indices length+ size= +size out augmentablefeaturevector augmentable feature vector dictionary = +dictionary+ size = +dictionary size out augmentablefeaturevector augmentable feature vector index +key+ = +index values length arrays binarysearch binary search indices index doesn't work because of the unused portion of the at the end out augmentablefeaturevector augmentable feature vector tosparsevector to sparse vector size= +size v indices != indices != xxx we should check to see if there were more higher indices in v that didn't get added! v indices != v indices != v values == xxx we should check to see if there were more higher indices in v that didn't get added! v indices != v values != xxx we should check to see if there were more higher indices in v that didn't get added! but only adds to those entries that have locations i e are already non zero assert v getclass get getname get name this needs to be checked! indices == v indices == v values != xxx we aren't adding in values with indices higher than this size ! indices == v indices != indices == v indices != v values == xxx we aren't adding in values with indices higher than size ! indices == v indices != v values != xxx we aren't adding in values with indices higher than size ! indices != indices != v indices == v values != xxx we aren't adding in values with indices higher than size ! indices != v indices != indices != v indices != v values == xxx we should check to see if there were more higher indices in v that didn't get added! indices != v indices != v values != xxx we should check to see if there were more higher indices in v that didn't get added! out asv a s v size= +size+ dict size= +dictionary size + values length= +values length+ indices length= +indices length vector is dense so indices are already sorted assume called from constructor initialize member vars just bubblesort bubble sort this is efficient when already mostly sorted note that we bubblesort bubble sort from the the end forward this is most efficient when we have added a few additional items to the end of a previously sorted list note that we remember the highest index that was already sorted as maxsortedindex max sorted index note that maxsortedindex max sorted index may be 1 here so the first time through the outer loop just falls through immediately when the termination condition of the inner loop is met swap both indices and values argument zero is special value meaning that this function should count them otherwise it assumes they have been counted elsewhere and that numduplicates num duplicates is how many that count yeilded note that this relies on the indices being sorted first out print afv a f v removeduplicates remove duplicates for i = 0 i < size i++ out print + dictionary lookupobject lookup indices i + = + indices i out numduplicates= num duplicates= +numduplicates +num duplicates serialization 