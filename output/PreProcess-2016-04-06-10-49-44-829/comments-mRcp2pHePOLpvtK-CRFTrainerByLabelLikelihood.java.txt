optimizablecrf optimizable c r f ocrf todo t o d o remove this it is just for debugging various values from crf c r f acting as indicators of when we need to re calculate expectations and values to getvalue get value because weights' values changed re calculate to getvaluegradient get value gradient because weights' values changed re allocate crf weights expectations constraints because new states transitions use mcrf trainingset training set to see when we need to re allocate crf weights expectations constraints because we are using a different traininglist training list than last time xxx temporary hack this is quite useful to have though!! cas reallocatesufficientstatistics reallocate sufficient statistics not necessary here because it is done in the constructor for optimizablecrf optimizable c r f ocrf = new optimizablecrf optimizable c r f crf trainingset training set this will set this mcrf if necessary alternative opt = new conjugategradient conjugate gradient 0 001 question if i make a non inner crf c r f trainer can that by subclassed in another and can that subclass still have access to all the crf's c r f's instance variables? answer a n s w e r yes and yes but you have to use special syntax in the subclass ctor see mallet dev archive cas this will set this mcrf if necessary this will set this opt if necessary mask out all features some will be added later by featureinducer feature inducer inducefeaturesfor induce features for todo t o d o careful! if validationdata validation data and testingdata testing data get removed as arguments to this then the next two lines of work will have to be done somewhere print out some feature information train the crf c r f xxx necessary? don't train until we have added some features create the list of tokens for both unclustered and clustered feature induction this errorinstances instances featureselection feature selection will get examined by featureinducer feature inducer so it can know how to add new singleton features this will put extra instances in this cluster out instance= +i+ position= +j+ fv= +lattice getlabelingatposition get labeling at position j tostring to out position= +j+ truelabelprob= label prob= +truelabelprob +true label prob note that we may see some impossible transitions here like o >i > i in a oib o i b model because we are using lattice gammas to get the predicted label not viterbi i don't believe this does any harm and may do some good note that this adds features globally but not on a per transition basis note that this adds features globally but not on a per transition basis this is done in crf4 c r f4 train anyway this setweightsdimensionasin set weights dimension as in trainingdata training data this growweightsdimensiontoinputalphabet grow weights dimension to input alphabet getdefaultfeatureindex get default feature index { defaultfeatureindex default feature index } serialization for crftrainerbylikelihood c r f trainer by likelihood /* need to check for pointers */ out writeint write defaultfeatureindex default feature index defaultfeatureindex default feature index = in readint read 