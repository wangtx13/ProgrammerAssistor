	protected multinomial { } size is the number of entries in probabilities that have valid values in them note that the dictionary and thus the resulting multinomial may be bigger than size if the dictionary is shared with multiple estimators and the dictionary grew due to another estimator no not necessarily see comment above assert dictionary == || dictionary size == size assert probabilities length == size xxx consider always copying so that we are assured that we always have a real probability distribution check that we have a probability distribution out print sum= +sum if sum < f throw new illegalstateexception illegal state out i = +i+ f = +f+ sum = +sum size is the number of 1 0 weight features in the feature vector if vector is longer than values act as if values were extended with values of minus infinity serialization xxx make this inherit from something like augmentabledensefeaturevector augmentable dense feature vector the number of valid entries in counts assert dictionary == 	 size is fixed if dictionary present? xxx note that this does not reset the size ! xxx remove this method? xxx copy instead? xxx set size to match counts length? xxx add increment key count or is it too dangerous? originally the value of the feature was not being taken into account here so words were only counted once per document! gdruck increment fv indexatlocation index at location fvi scale if counts != throw new illegalstateexception illegal state foo serialization serialversionuid serial uid is overriden to prevent innocuous changes in this from making the serialization mechanism think the external format has changed estimator side effect updates size member if dictionary != out dictionary lookupobject lookup i tostring to +' '+counts i end mestimator m estimator mlestimator m l estimator multinomial laplaceestimator laplace estimator todo lazy lazy lazy make this serializable too xxx unfinished 