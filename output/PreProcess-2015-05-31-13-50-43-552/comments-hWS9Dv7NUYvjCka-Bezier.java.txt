/* digitized points */ /* squared */ /* fit the bezier curves */ /* unit tangent vectors at endpoints */ /* unit tangent vectors at endpoints */ /*control /* control points of fitted bezier curve*/ /* parameter values for point */ /* improved parameter values */ /* maximum fitting error	 */ /* point to split point set at 
 this is an of size one because we need it as an input/output parameter 
 */ /* number of points in subset */ /*error /* below which you try iterating */ /* max times to try iterating */ /* unit tangent vector at splitpoint split point */ /* use heuristic if region only has two points in it */ /* parameterize points and attempt to fit curve */ /* find max deviation of points to fitted curve */ /* if not too large try some reparameterization */ /* and iteration */ /* fitting failed split at max point and fit recursively */ /*control /* control points of fitted bezier curve*/ /* parameter values for point */ /* improved parameter values */ /* maximum fitting error	 */ /* point to split point set at 
 this is an of size one because we need it as an input/output parameter 
 */ /* number of points in subset */ /*error /* below which you try iterating */ /* max times to try iterating */ /* unit tangent vector at splitpoint split point */ /* use heuristic if region only has two points in it */ /* parameterize points and attempt to fit curve */ /* find max deviation of points to fitted curve */ /* if not too large try some reparameterization */ /* and iteration */ /* fitting failed split at max point and fit recursively */ /* precomputed rhs for eqn	*/ /* number of pts in sub curve */ /* matrix c		*/ /* matrix x			*/ /* determinants of matrices	*/ /* alpha values left and right	*/ /* utility variable		*/ /* r e t u r n bezier curve ctl pts	*/ /* compute the a's	*/ /* create the c and x matrices	*/ /*					c /*					 c 1 0 += v2dot v2 dot a i 0 a i 1 */ /* compute the determinants of c and x	*/ /* finally derive alpha values	*/ /* if alpha negative use the wu/barsky wu/ barsky heuristic see text */ /* if alpha is 0 you get coincident control points that to
 * divide by zero in any subsequent newtonraphsonrootfind newton raphson root find call */ /* first and last control points of the bezier curve are */ /* positioned exactly at the first and last data points */ /* control points 1 and 2 are positioned an alpha distance out */ /* on the tangent vectors left and right respectively */ /* new parameter values	*/ /* q' and q''			*/ /*u evaluated at q q' q''	*/ /* improved u	*/ /* compute q u 	*/ /* generate control vertices for q'	*/ /* generate control vertices for q'' */ /* compute q' u and q'' u 	*/ /* compute f u /f' u */ /* u = u f u /f' u */ /* point on curve at parameter t	*/ /* local copy of control points		*/ /* copy array	*/ /* triangle computation	*/ /* parameterization		*/ /* maximum */ /* current */ /* point on curve */ /* vector from point to curve */ /* 
 * graphicsgems graphics gems c
 * 2d and 3d vector c library
  library
 * by andrew glassner
  glassner
 * from graphics gems academic press 1990
 * 
 */ 