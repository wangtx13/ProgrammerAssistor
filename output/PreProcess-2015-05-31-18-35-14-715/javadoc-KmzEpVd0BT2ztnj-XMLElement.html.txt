nanoxml xmlelement xml element xmlelement xml element nanoxml_major_version nanoxml_minor_version xmlelement xml element xmlelement xml element hashmap hash map entities xmlelement xml element skipleadingwhitespace skip leading whitespace xmlelement xml element hashmap hash map entities skipleadingwhitespace skip leading whitespace xmlelement xml element hashmap hash map entities skipleadingwhitespace skip leading whitespace ignorecase ignore case xmlelement xml element hashmap hash map entities skipleadingwhitespace skip leading whitespace fillbasicconversiontable fill basic conversion table ignorecase ignore case xmlelement xml element hashmap hash map entities skipleadingwhitespace skip leading whitespace fillbasicconversiontable fill basic conversion table ignorecase ignore case encodeunicodecharacters encode unicode characters addchild add child xmlelement xml element child setattribute set attribute name value setintattribute set attribute name value setdoubleattribute set attribute name value countchildren count children iterator enumerateattributenames enumerate attribute names iterator iteratechildren iterate children arraylist list getchildren get children getcontent get content getlinenr get line nr getattribute get attribute name getattribute get attribute name defaultvalue default value getattribute get attribute name map valueset value set defaultkey default key allowliterals allow literals getstringattribute get attribute name getstringattribute get attribute name defaultvalue default value getstringattribute get attribute name hashmap hash map valueset value set defaultkey default key allowliterals allow literals getintattribute get attribute name getintattribute get attribute name defaultvalue default value getintattribute get attribute name min max defaultvalue default value getintattribute get attribute name hashmap hash map valueset value set defaultkey default key allowliteralnumbers allow literal numbers getdoubleattribute get attribute name getdoubleattribute get attribute name defaultvalue default value getdoubleattribute get attribute name hashmap hash map valueset value set defaultkey default key allowliteralnumbers allow literal numbers getbooleanattribute get attribute name truevalue value falsevalue value defaultvalue default value getbooleanattribute get attribute name defaultvalue default value getname get name parsefromreader parse from reader io reader reader io ioexception i o xmlparseexception xml parse parsefromreader parse from reader io reader reader startinglinenr starting line nr io ioexception i o xmlparseexception xml parse parsestring parse xmlparseexception xml parse parsestring parse offset xmlparseexception xml parse parsestring parse offset end xmlparseexception xml parse parsestring parse offset end startinglinenr starting line nr xmlparseexception xml parse parsechararray parse char char input offset end xmlparseexception xml parse parsechararray parse char char input offset end startinglinenr starting line nr xmlparseexception xml parse removechild remove child xmlelement xml element child removeattribute remove attribute name xmlelement xml element createelement create element name xmlelement xml element createelement create element setcontent set content content setname set name name tostring to write io writer writer io ioexception i o print io printwriter print writer writer print io printwriter print writer writer indent writeencoded write encoded io writer writer str io ioexception i o scanidentifier scan identifier stringbuffer buffer result io ioexception i o char scanwhitespace scan whitespace io ioexception i o char scanwhitespace scan whitespace stringbuffer buffer result io ioexception i o scanstring scan stringbuffer buffer io ioexception i o scanpcdata scan p c data stringbuffer buffer data io ioexception i o checkcdata check c d a t a stringbuffer buffer buf io ioexception i o skipcomment skip comment io ioexception i o skipspecialtag skip special tag bracketlevel bracket level io ioexception i o checkliteral check literal literal io ioexception i o char readchar read char io ioexception i o scanelement scan element xmlelement xml element elt io ioexception i o resolveentity resolve entity stringbuffer buffer buf io ioexception i o unreadchar unread char char ch xmlparseexception xml parse invalidvalueset invalid value set name xmlparseexception xml parse invalidvalue invalid value name value xmlparseexception xml parse unexpectedendofdata unexpected end of data xmlparseexception xml parse syntaxerror syntax context xmlparseexception xml parse expectedinput expected input charset char set xmlparseexception xml parse unknownentity unknown entity name xmlelement xml element parsing xml data you can parse xml data using the following xmlelement xml element xml = new xmlelement xml element filereader reader reader = new filereader reader filename xml xml parsefromreader parse from reader reader retrieving attributes you can enumerate the attributes of an element using the enumerateattributenames enumerate attribute names the attribute values can be retrieved using the getstringattribute get attribute the following example shows how to list the attributes of an element xmlelement xml element element = iterator iter = element getattributenames get attribute names while iter hasnext has next { key = iter next value = element getstringattribute get attribute key out key + = + value } retrieving child elements you can enumerate the children of an element using iteratechildren iterate children the number of child iterator can be retrieved using countchildren count children elements containing character data if an iterator contains character data like in the following example the title you can retrieve that data using the getcontent get content subclassing xmlelement xml element when subclassing xmlelement xml element you need to override the createelement create element which has to a new copy of the receiver see also xmlparseexception xml parse major of nanoxml nano xml classes with the same major and minor are binary compatible classes with the same major are source compatible if the major is different you may need to modify the client source see also nanoxml_minor_version constant field values minor of nanoxml nano xml classes with the same major and minor are binary compatible classes with the same major are source compatible if the major is different you may need to modify the client source see also nanoxml_major_version constant field values creates and initializes a new xml element calling the construction is equivalent to new xmlelement xml element new hashmap hash map postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also xmlelement xml element hashmap hash map xmlelement xml element xmlelement xml element hashmap hash map creates and initializes a new xml element calling the construction is equivalent to new xmlelement xml element entities entities the entity conversion table preconditions entities != postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also xmlelement xml element xmlelement xml element xmlelement xml element hashmap hash map creates and initializes a new xml element calling the construction is equivalent to new xmlelement xml element new hashmap hash map skipleadingwhitespace skip leading whitespace skipleadingwhitespace skip leading whitespace if leading and trailing whitespace in pcdata p c d a t a content has to be removed postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also xmlelement xml element xmlelement xml element hashmap hash map xmlelement xml element hashmap hash map creates and initializes a new xml element calling the construction is equivalent to new xmlelement xml element entities skipleadingwhitespace skip leading whitespace entities the entity conversion table skipleadingwhitespace skip leading whitespace if leading and trailing whitespace in pcdata p c d a t a content has to be removed preconditions entities != postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also xmlelement xml element xmlelement xml element xmlelement xml element hashmap hash map creates and initializes a new xml element entities the entity conversion table skipleadingwhitespace skip leading whitespace if leading and trailing whitespace in pcdata p c d a t a content has to be removed ignorecase ignore case if the case of element and attribute names have to be ignored preconditions entities != postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also xmlelement xml element xmlelement xml element xmlelement xml element hashmap hash map xmlelement xml element hashmap hash map creates and initializes a new xml element this constructor should only be called from createelement create element to create child iterator entities the entity conversion table skipleadingwhitespace skip leading whitespace if leading and trailing whitespace in pcdata p c d a t a content has to be removed fillbasicconversiontable fill basic conversion table if the basic entities need to be added to the entity list ignorecase ignore case if the case of element and attribute names have to be ignored preconditions entities != if fillbasicconversiontable fill basic conversion table == then entities contains at least the following entries amp lt apos and postconditions countchildren count children = 0 iteratechildren iterate children = empty enumeration enumeratepropertynames enumerate property names = empty enumeration getchildren get children = empty vector getcontent get content = getlinenr get line nr = 0 getname get name = see also createelement create element adds a child element child the child element to add preconditions child != child getname get name != child does not have a parent element postconditions countchildren count children = old countchildren count children + 1 iteratechildren iterate children = old iteratechildren iterate children + child getchildren get children = old iteratechildren iterate children + child see also countchildren count children iteratechildren iterate children getchildren get children removechild remove child xmlelement xml element adds or modifies an attribute name the name of the attribute value the value of the attribute preconditions name != name is a valid xml identifier value != postconditions enumerateattributenames enumerate attribute names = old enumerateattributenames enumerate attribute names + name getattribute get attribute name = value adds or modifies an attribute name the name of the attribute value the value of the attribute preconditions name != name is a valid xml identifier postconditions enumerateattributenames enumerate attribute names = old enumerateattributenames enumerate attribute names + name getintattribute get attribute name = value adds or modifies an attribute name the name of the attribute value the value of the attribute preconditions name != name is a valid xml identifier postconditions enumerateattributenames enumerate attribute names = old enumerateattributenames enumerate attribute names + name getdoubleattribute get attribute name = value the number of child iterator of the element postconditions result = 0 see also addchild add child xmlelement xml element iteratechildren iterate children getchildren get children removechild remove child xmlelement xml element enumerates the attribute names postconditions result != enumerates the child iterator postconditions result != the child iterator as a arraylist list it is safe to modify this arraylist list postconditions result != see also addchild add child xmlelement xml element countchildren count children iteratechildren iterate children removechild remove child xmlelement xml element the pcdata p c d a t a content of the if there is no such content is see also setcontent set content the line nr in the source data on which the element is found this 0 there is no associated source data postconditions result = 0 an attribute of the element if the attribute doesn't is name the name of the attribute preconditions name != name is a valid xml identifier an attribute of the element if the attribute doesn't defaultvalue default value is name the name of the attribute defaultvalue default value key to use if the attribute is missing preconditions name != name is a valid xml identifier an attribute by looking up a key in a hashtable if the attribute doesn't the value corresponding to defaultkey default key is as an example if valueset value set contains the mapping one = 1 and the element contains the attribute attr= one then getattribute get attribute attr mapping defaultkey default key 1 name the name of the attribute valueset value set hashmap hash map mapping keyset key set iterator to values defaultkey default key key to use if the attribute is missing allowliterals allow literals if literals are valid preconditions name != name is a valid xml identifier valueset value set != the keyset key set iterator of valueset value set are strings see also setattribute set attribute removeattribute remove attribute enumerateattributenames enumerate attribute names getattribute get attribute getattribute get attribute an attribute of the element if the attribute doesn't is name the name of the attribute preconditions name != name is a valid xml identifier see also setattribute set attribute removeattribute remove attribute enumerateattributenames enumerate attribute names getstringattribute get attribute getstringattribute get attribute hashmap hash map an attribute of the element if the attribute doesn't defaultvalue default value is name the name of the attribute defaultvalue default value key to use if the attribute is missing preconditions name != name is a valid xml identifier see also setattribute set attribute removeattribute remove attribute enumerateattributenames enumerate attribute names getstringattribute get attribute getstringattribute get attribute hashmap hash map an attribute by looking up a key in a hashtable if the attribute doesn't the value corresponding to defaultkey default key is as an example if valueset value set contains the mapping one = 1 and the element contains the attribute attr= one then getattribute get attribute attr mapping defaultkey default key 1 name the name of the attribute valueset value set hashmap hash map mapping keyset key set iterator to values defaultkey default key key to use if the attribute is missing allowliterals allow literals if literals are valid preconditions name != name is a valid xml identifier valueset value set != the keyset key set iterator of valueset value set are strings the values of valueset value set are strings see also setattribute set attribute removeattribute remove attribute enumerateattributenames enumerate attribute names getstringattribute get attribute getstringattribute get attribute an attribute of the element if the attribute doesn't 0 is name the name of the attribute preconditions name != name is a valid xml identifier see also setintattribute set attribute enumerateattributenames enumerate attribute names getintattribute get attribute getintattribute get attribute hashmap hash map an attribute of the element if the attribute doesn't defaultvalue default value is name the name of the attribute defaultvalue default value key to use if the attribute is missing preconditions name != name is a valid xml identifier see also setintattribute set attribute enumerateattributenames enumerate attribute names getintattribute get attribute getintattribute get attribute hashmap hash map an attribute by looking up a key in a hashtable if the attribute doesn't the value corresponding to defaultkey default key is as an example if valueset value set contains the mapping one = 1 and the element contains the attribute attr= one then getintattribute get attribute attr mapping defaultkey default key 1 name the name of the attribute valueset value set hashmap hash map mapping keyset key set iterator to values defaultkey default key key to use if the attribute is missing allowliteralnumbers allow literal numbers if literal numbers are valid preconditions name != name is a valid xml identifier valueset value set != the keyset key set iterator of valueset value set are strings the values of valueset value set are defaultkey default key is either a key in valueset value set or an see also setintattribute set attribute enumerateattributenames enumerate attribute names getintattribute get attribute getintattribute get attribute an attribute of the element if the attribute doesn't 0 0 is name the name of the attribute preconditions name != name is a valid xml identifier see also setdoubleattribute set attribute enumerateattributenames enumerate attribute names getdoubleattribute get attribute getdoubleattribute get attribute hashmap hash map an attribute of the element if the attribute doesn't defaultvalue default value is name the name of the attribute defaultvalue default value key to use if the attribute is missing preconditions name != name is a valid xml identifier see also setdoubleattribute set attribute enumerateattributenames enumerate attribute names getdoubleattribute get attribute getdoubleattribute get attribute hashmap hash map an attribute by looking up a key in a hashtable if the attribute doesn't the value corresponding to defaultkey default key is as an example if valueset value set contains the mapping one = 1 0 and the element contains the attribute attr= one then getdoubleattribute get attribute attr mapping defaultkey default key 1 0 name the name of the attribute valueset value set hashmap hash map mapping keyset key set iterator to values defaultkey default key key to use if the attribute is missing allowliteralnumbers allow literal numbers if literal numbers are valid preconditions name != name is a valid xml identifier valueset value set != the keyset key set iterator of valueset value set are strings the values of valueset value set are defaultkey default key is either a key in valueset value set or a see also setdoubleattribute set attribute enumerateattributenames enumerate attribute names getdoubleattribute get attribute getdoubleattribute get attribute an attribute of the element if the attribute doesn't defaultvalue default value is if the value of the attribute is equal to truevalue value is if the value of the attribute is equal to falsevalue value is if the value doesn't match truevalue value or falsevalue value an is thrown name the name of the attribute truevalue value the value associated with falsevalue value the value associated with defaultvalue default value value to use if the attribute is missing preconditions name != name is a valid xml identifier truevalue value and falsevalue value are different strings see also setattribute set attribute removeattribute remove attribute enumerateattributenames enumerate attribute names the name of the element see also setname set name reads one xml element from a io reader and parses it reader the reader from which to retrieve the xml data preconditions reader != reader is not closed postconditions the state of the receiver is updated to reflect the xml element parsed from the reader the reader points to the first character following the last ' ' character of the xml element io ioexception i o if an occured while reading the input xmlparseexception xml parse if an occured while parsing the read data reads one xml element from a io reader and parses it reader the reader from which to retrieve the xml data startinglinenr starting line nr the line number of the first line in the data preconditions reader != reader is not closed postconditions the state of the receiver is updated to reflect the xml element parsed from the reader the reader points to the first character following the last ' ' character of the xml element io ioexception i o if an occured while reading the input xmlparseexception xml parse if an occured while parsing the read data reads one xml element from a and parses it the reader from which to retrieve the xml data preconditions != length 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the reads one xml element from a and parses it the reader from which to retrieve the xml data offset the first character in to scan preconditions != offset lt length offset = 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the reads one xml element from a and parses it the reader from which to retrieve the xml data offset the first character in to scan end the character where to stop scanning this character is not scanned preconditions != end lt = length offset lt end offset = 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the reads one xml element from a and parses it the reader from which to retrieve the xml data offset the first character in to scan end the character where to stop scanning this character is not scanned startinglinenr starting line nr the line number of the first line in the data preconditions != end lt = length offset lt end offset = 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the reads one xml element from a char and parses it input the reader from which to retrieve the xml data offset the first character in to scan end the character where to stop scanning this character is not scanned preconditions input != end lt = input length offset lt end offset = 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the reads one xml element from a char and parses it input the reader from which to retrieve the xml data offset the first character in to scan end the character where to stop scanning this character is not scanned startinglinenr starting line nr the line number of the first line in the data preconditions input != end lt = input length offset lt end offset = 0 postconditions the state of the receiver is updated to reflect the xml element parsed from the reader xmlparseexception xml parse if an occured while parsing the removes a child element child the child element to remove preconditions child != child is a child element of the receiver postconditions countchildren count children = old countchildren count children 1 iteratechildren iterate children = old iteratechildren iterate children child getchildren get children = old iteratechildren iterate children child see also addchild add child xmlelement xml element countchildren count children iteratechildren iterate children getchildren get children removes an attribute name the name of the attribute preconditions name != name is a valid xml identifier postconditions enumerateattributenames enumerate attribute names = old enumerateattributenames enumerate attribute names name getattribute get attribute name = creates a new similar xml element creates a new similar xml element you should override this when subclassing xmlelement xml element changes the content content the new content changes the name of the element name the new name preconditions name != name is a valid xml identifier see also getname get name writes the xml element to a tostring to in see also write writer writes the xml element to a writer writer the writer to write the xml data to preconditions writer != writer is not closed io ioexception i o if the data could not be written to the writer see also tostring to writes the xml element to a print writer and indents the elements writer the writer to write the xml data to preconditions writer != writer is not closed io ioexception i o if the data could not be written to the writer see also tostring to writes the xml element to a print writer and indents the elements writer the writer to write the xml data to preconditions writer != writer is not closed indent the indentation io ioexception i o if the data could not be written to the writer see also tostring to writes a encoded to a writer writer the writer to write the xml data to str the to write encoded preconditions writer != writer is not closed str != io ioexception i o scans an identifier from the current reader the scanned identifier is appended to result result the buffer in which the scanned identifier will be put preconditions result != the next character read from the reader is a valid first character of an xml identifier postconditions the next character read from the reader won't be an identifier character io ioexception i o this scans an identifier from the current reader the next character following the whitespace io ioexception i o this scans an identifier from the current reader the scanned whitespace is appended to result the next character following the whitespace preconditions result != io ioexception i o this scans a delimited from the current reader the scanned without delimiters is appended to preconditions != the next char read is the delimiter io ioexception i o scans a #pcdata # p c d a t a element cdata c d a t a sections and entities are resolved the next lt char is skipped the scanned data is appended to data preconditions data != io ioexception i o scans a special tag and if the tag is a cdata c d a t a section append its content to buf preconditions buf != the first lt has already been read io ioexception i o skips a comment preconditions the first io ioexception i o skips a special tag or comment bracketlevel bracket level the number of open square brackets that have already been read preconditions the first = 0 io ioexception i o scans the data for literal text scanning stops when a character does not match or after the complete text has been checked whichever comes first literal the literal to check preconditions literal != io ioexception i o reads a character from a reader io ioexception i o scans an xml element elt the element that will contain the result preconditions the first lt has already been read elt != io ioexception i o resolves an entity the name of the entity is read from the reader the value of the entity is appended to buf buf where to put the entity value preconditions the first amp has already been read buf != io ioexception i o pushes a character back to the read back buffer ch the character to push back preconditions the read back buffer is empty ch != '\0' creates a parse for when an invalid valueset is given to a name the name of the entity preconditions name != creates a parse for when an invalid value is given to a name the name of the entity value the value of the entity preconditions name != value != creates a parse for when the end of the data input has been reached creates a parse for when a syntax occured context the context in which the occured preconditions context != context length 0 creates a parse for when the next character read is not the character that was expected charset char set the set of characters in human readable form that was expected preconditions charset char set != charset char set length 0 creates a parse for when an entity could not be resolved name the name of the entity preconditions name != name length 0 